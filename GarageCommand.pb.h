// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolBuffers/GarageCommand.proto

#ifndef PROTOBUF_ProtocolBuffers_2fGarageCommand_2eproto__INCLUDED
#define PROTOBUF_ProtocolBuffers_2fGarageCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtocolBuffers_2fGarageCommand_2eproto();
void protobuf_AssignDesc_ProtocolBuffers_2fGarageCommand_2eproto();
void protobuf_ShutdownFile_ProtocolBuffers_2fGarageCommand_2eproto();

class GarageCommand;

enum GarageCommand_Command {
  GarageCommand_Command_TRIGGER_DOOR = 1
};
bool GarageCommand_Command_IsValid(int value);
const GarageCommand_Command GarageCommand_Command_Command_MIN = GarageCommand_Command_TRIGGER_DOOR;
const GarageCommand_Command GarageCommand_Command_Command_MAX = GarageCommand_Command_TRIGGER_DOOR;
const int GarageCommand_Command_Command_ARRAYSIZE = GarageCommand_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* GarageCommand_Command_descriptor();
inline const ::std::string& GarageCommand_Command_Name(GarageCommand_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    GarageCommand_Command_descriptor(), value);
}
inline bool GarageCommand_Command_Parse(
    const ::std::string& name, GarageCommand_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GarageCommand_Command>(
    GarageCommand_Command_descriptor(), name, value);
}
// ===================================================================

class GarageCommand : public ::google::protobuf::Message {
 public:
  GarageCommand();
  virtual ~GarageCommand();

  GarageCommand(const GarageCommand& from);

  inline GarageCommand& operator=(const GarageCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GarageCommand& default_instance();

  void Swap(GarageCommand* other);

  // implements Message ----------------------------------------------

  GarageCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GarageCommand& from);
  void MergeFrom(const GarageCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GarageCommand_Command Command;
  static const Command TRIGGER_DOOR = GarageCommand_Command_TRIGGER_DOOR;
  static inline bool Command_IsValid(int value) {
    return GarageCommand_Command_IsValid(value);
  }
  static const Command Command_MIN =
    GarageCommand_Command_Command_MIN;
  static const Command Command_MAX =
    GarageCommand_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    GarageCommand_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return GarageCommand_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return GarageCommand_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return GarageCommand_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .GarageCommand.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::GarageCommand_Command command() const;
  inline void set_command(::GarageCommand_Command value);

  // required uint32 garageId = 2;
  inline bool has_garageid() const;
  inline void clear_garageid();
  static const int kGarageIdFieldNumber = 2;
  inline ::google::protobuf::uint32 garageid() const;
  inline void set_garageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GarageCommand)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_garageid();
  inline void clear_has_garageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int command_;
  ::google::protobuf::uint32 garageid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtocolBuffers_2fGarageCommand_2eproto();
  friend void protobuf_AssignDesc_ProtocolBuffers_2fGarageCommand_2eproto();
  friend void protobuf_ShutdownFile_ProtocolBuffers_2fGarageCommand_2eproto();

  void InitAsDefaultInstance();
  static GarageCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// GarageCommand

// required .GarageCommand.Command command = 1;
inline bool GarageCommand::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GarageCommand::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GarageCommand::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GarageCommand::clear_command() {
  command_ = 1;
  clear_has_command();
}
inline ::GarageCommand_Command GarageCommand::command() const {
  return static_cast< ::GarageCommand_Command >(command_);
}
inline void GarageCommand::set_command(::GarageCommand_Command value) {
  assert(::GarageCommand_Command_IsValid(value));
  set_has_command();
  command_ = value;
}

// required uint32 garageId = 2;
inline bool GarageCommand::has_garageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GarageCommand::set_has_garageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GarageCommand::clear_has_garageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GarageCommand::clear_garageid() {
  garageid_ = 0u;
  clear_has_garageid();
}
inline ::google::protobuf::uint32 GarageCommand::garageid() const {
  return garageid_;
}
inline void GarageCommand::set_garageid(::google::protobuf::uint32 value) {
  set_has_garageid();
  garageid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GarageCommand_Command>() {
  return ::GarageCommand_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtocolBuffers_2fGarageCommand_2eproto__INCLUDED
