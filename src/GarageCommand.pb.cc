// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GarageCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GarageCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GarageCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarageCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GarageCommand_Command_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GarageCommand_2eproto() {
  protobuf_AddDesc_GarageCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GarageCommand.proto");
  GOOGLE_CHECK(file != NULL);
  GarageCommand_descriptor_ = file->message_type(0);
  static const int GarageCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarageCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarageCommand, garageid_),
  };
  GarageCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarageCommand_descriptor_,
      GarageCommand::default_instance_,
      GarageCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarageCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarageCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarageCommand));
  GarageCommand_Command_descriptor_ = GarageCommand_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GarageCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarageCommand_descriptor_, &GarageCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GarageCommand_2eproto() {
  delete GarageCommand::default_instance_;
  delete GarageCommand_reflection_;
}

void protobuf_AddDesc_GarageCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023GarageCommand.proto\"g\n\rGarageCommand\022\'"
    "\n\007command\030\001 \002(\0162\026.GarageCommand.Command\022"
    "\020\n\010garageId\030\002 \002(\r\"\033\n\007Command\022\020\n\014TRIGGER_"
    "DOOR\020\001", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GarageCommand.proto", &protobuf_RegisterTypes);
  GarageCommand::default_instance_ = new GarageCommand();
  GarageCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GarageCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GarageCommand_2eproto {
  StaticDescriptorInitializer_GarageCommand_2eproto() {
    protobuf_AddDesc_GarageCommand_2eproto();
  }
} static_descriptor_initializer_GarageCommand_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* GarageCommand_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarageCommand_Command_descriptor_;
}
bool GarageCommand_Command_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GarageCommand_Command GarageCommand::TRIGGER_DOOR;
const GarageCommand_Command GarageCommand::Command_MIN;
const GarageCommand_Command GarageCommand::Command_MAX;
const int GarageCommand::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GarageCommand::kCommandFieldNumber;
const int GarageCommand::kGarageIdFieldNumber;
#endif  // !_MSC_VER

GarageCommand::GarageCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarageCommand::InitAsDefaultInstance() {
}

GarageCommand::GarageCommand(const GarageCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarageCommand::SharedCtor() {
  _cached_size_ = 0;
  command_ = 1;
  garageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarageCommand::~GarageCommand() {
  SharedDtor();
}

void GarageCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GarageCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarageCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarageCommand_descriptor_;
}

const GarageCommand& GarageCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GarageCommand_2eproto();
  return *default_instance_;
}

GarageCommand* GarageCommand::default_instance_ = NULL;

GarageCommand* GarageCommand::New() const {
  return new GarageCommand;
}

void GarageCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 1;
    garageid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarageCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GarageCommand.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GarageCommand_Command_IsValid(value)) {
            set_command(static_cast< ::GarageCommand_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_garageId;
        break;
      }

      // required uint32 garageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_garageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &garageid_)));
          set_has_garageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarageCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GarageCommand.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // required uint32 garageId = 2;
  if (has_garageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->garageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarageCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GarageCommand.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // required uint32 garageId = 2;
  if (has_garageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->garageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarageCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GarageCommand.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // required uint32 garageId = 2;
    if (has_garageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->garageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarageCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarageCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarageCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarageCommand::MergeFrom(const GarageCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_garageid()) {
      set_garageid(from.garageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarageCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarageCommand::CopyFrom(const GarageCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarageCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GarageCommand::Swap(GarageCommand* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(garageid_, other->garageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarageCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarageCommand_descriptor_;
  metadata.reflection = GarageCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
